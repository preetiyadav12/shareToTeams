import Axios, { AxiosInstance, AxiosRequestConfig } from "axios";
import { EntityState } from "../models/entity-state";

//********** Force to Use http adapter (node.js version) ********
Axios.defaults.adapter = require("axios/lib/adapters/http.js");
//********** Force to Use http adapter (node.js version) ********

export class EntityApi {
  private readonly api: AxiosInstance;
  // private readonly axios: any;

  constructor(baseApiUrl: string, idToken: string) {
    this.api = Axios.create({
      baseURL: baseApiUrl,
      headers: {
        Authorization: `Bearer ${idToken}`,
        "Content-Type": "application/json",
      },
    });

    console.log(`API Base Url: ${baseApiUrl}`);
    console.log(`Token: ${idToken}`);
  }

  public getMapping = async (
    entityId: string
  ): Promise<EntityState | undefined> => {
    if (entityId.length === 0) {
      throw new Error("Entity Id cannot be emtpy!");
    }

    const entityRequest: EntityState = {
      entityId,
    };

    const requestOptions: AxiosRequestConfig = {
      method: "post",
      data: JSON.stringify(entityRequest),
    };

    try {
      const resp = await this.api("/api/entity/mapping", requestOptions);

      if (resp.status !== 200) return undefined;
      return await resp.data;
    } catch (error: any) {
      if (error.response) {
        // The request was made and the server responded with a status code
        // that falls out of the range of 2xx
        console.log(error.response.data);
        console.log(error.response.status);
        console.log(error.response.headers);
      } else if (error.request) {
        // The request was made but no response was received
        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
        // http.ClientRequest in node.js
        console.log(error.request);
      } else {
        // Something happened in setting up the request that triggered an Error
        console.log("Error", error.message);
      }
      console.log(error.config);
      throw error;
    }
  };

  public updateMapping = async (entity: EntityState): Promise<boolean> => {
    const requestOptions: AxiosRequestConfig = {
      method: "post",
      data: JSON.stringify(entity),
    };

    try {
      const resp = await this.api("/api/entity/update", requestOptions);

      if (resp.status !== 200) return false;

      return await resp.data;
    } catch (error: any) {
      if (error.response) {
        // The request was made and the server responded with a status code
        // that falls out of the range of 2xx
        console.log(error.response.data);
        console.log(error.response.status);
        console.log(error.response.headers);
      } else if (error.request) {
        // The request was made but no response was received
        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
        // http.ClientRequest in node.js
        console.log(error.request);
      } else {
        // Something happened in setting up the request that triggered an Error
        console.log("Error", error.message);
      }
      console.log(error.config);
      throw error;
    }
  };
}
